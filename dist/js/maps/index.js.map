{"version":3,"names":[],"mappings":"","sources":["index.js"],"sourcesContent":["\"use strict\";\n\nvar _createClass = (function() {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function(Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n})();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar MicroModal = (function() {\n  \"use strict\";\n\n  var FOCUSABLE_ELEMENTS = [\n    \"a[href]\",\n    \"area[href]\",\n    'input:not([disabled]):not([type=\"hidden\"]):not([aria-hidden])',\n    \"select:not([disabled]):not([aria-hidden])\",\n    \"textarea:not([disabled]):not([aria-hidden])\",\n    \"button:not([disabled]):not([aria-hidden])\",\n    \"iframe\",\n    \"object\",\n    \"embed\",\n    \"[contenteditable]\",\n    '[tabindex]:not([tabindex^=\"-\"])'\n  ];\n\n  var Modal = (function() {\n    function Modal(_ref) {\n      var targetModal = _ref.targetModal;\n      var _ref$triggers = _ref.triggers;\n      var triggers = _ref$triggers === undefined ? [] : _ref$triggers;\n      var _ref$onShow = _ref.onShow;\n      var onShow = _ref$onShow === undefined ? function() {} : _ref$onShow;\n      var _ref$onClose = _ref.onClose;\n      var onClose = _ref$onClose === undefined ? function() {} : _ref$onClose;\n      var _ref$openTrigger = _ref.openTrigger;\n      var openTrigger =\n        _ref$openTrigger === undefined\n          ? \"data-micromodal-trigger\"\n          : _ref$openTrigger;\n      var _ref$closeTrigger = _ref.closeTrigger;\n      var closeTrigger =\n        _ref$closeTrigger === undefined\n          ? \"data-micromodal-close\"\n          : _ref$closeTrigger;\n      var _ref$disableScroll = _ref.disableScroll;\n      var disableScroll =\n        _ref$disableScroll === undefined ? false : _ref$disableScroll;\n      var _ref$disableFocus = _ref.disableFocus;\n      var disableFocus =\n        _ref$disableFocus === undefined ? false : _ref$disableFocus;\n      var _ref$awaitCloseAnimat = _ref.awaitCloseAnimation;\n      var awaitCloseAnimation =\n        _ref$awaitCloseAnimat === undefined ? false : _ref$awaitCloseAnimat;\n      var _ref$awaitOpenAnimati = _ref.awaitOpenAnimation;\n      var awaitOpenAnimation =\n        _ref$awaitOpenAnimati === undefined ? false : _ref$awaitOpenAnimati;\n      var _ref$debugMode = _ref.debugMode;\n      var debugMode = _ref$debugMode === undefined ? false : _ref$debugMode;\n\n      _classCallCheck(this, Modal);\n\n      // Save a reference of the modal\n      this.modal = document.getElementById(targetModal);\n\n      // Save a reference to the passed config\n      this.config = {\n        debugMode: debugMode,\n        disableScroll: disableScroll,\n        openTrigger: openTrigger,\n        closeTrigger: closeTrigger,\n        onShow: onShow,\n        onClose: onClose,\n        awaitCloseAnimation: awaitCloseAnimation,\n        awaitOpenAnimation: awaitOpenAnimation,\n        disableFocus: disableFocus\n      };\n\n      // Register click events only if pre binding eventListeners\n      if (triggers.length > 0)\n        this.registerTriggers.apply(this, _toConsumableArray(triggers));\n\n      // pre bind functions for event listeners\n      this.onClick = this.onClick.bind(this);\n      this.onKeydown = this.onKeydown.bind(this);\n    }\n\n    /**\n     * Loops through all openTriggers and binds click event\n     * @param  {array} triggers [Array of node elements]\n     * @return {void}\n     */\n\n    _createClass(Modal, [\n      {\n        key: \"registerTriggers\",\n        value: function registerTriggers() {\n          var _this = this;\n\n          for (\n            var _len = arguments.length, triggers = Array(_len), _key = 0;\n            _key < _len;\n            _key++\n          ) {\n            triggers[_key] = arguments[_key];\n          }\n\n          triggers.filter(Boolean).forEach(function(trigger) {\n            trigger.addEventListener(\"click\", function(event) {\n              return _this.showModal(event);\n            });\n          });\n        }\n      },\n      {\n        key: \"showModal\",\n        value: function showModal() {\n          var _this2 = this;\n\n          this.activeElement = document.activeElement;\n          this.modal.setAttribute(\"aria-hidden\", \"false\");\n          this.modal.classList.add(\"is-open\");\n          this.scrollBehaviour(\"disable\");\n          this.addEventListeners();\n\n          if (this.config.awaitOpenAnimation) {\n            (function() {\n              var handler = function handler() {\n                _this2.modal.removeEventListener(\n                  \"animationend\",\n                  handler,\n                  false\n                );\n                _this2.setFocusToFirstNode();\n              };\n              _this2.modal.addEventListener(\"animationend\", handler, false);\n            })();\n          } else {\n            this.setFocusToFirstNode();\n          }\n\n          this.config.onShow(this.modal, this.activeElement);\n        }\n      },\n      {\n        key: \"closeModal\",\n        value: function closeModal() {\n          var modal = this.modal;\n          this.modal.setAttribute(\"aria-hidden\", \"true\");\n          this.removeEventListeners();\n          this.scrollBehaviour(\"enable\");\n          if (this.activeElement) {\n            this.activeElement.focus();\n          }\n          this.config.onClose(this.modal);\n\n          if (this.config.awaitCloseAnimation) {\n            this.modal.addEventListener(\n              \"animationend\",\n              function handler() {\n                modal.classList.remove(\"is-open\");\n                modal.removeEventListener(\"animationend\", handler, false);\n              },\n              false\n            );\n          } else {\n            modal.classList.remove(\"is-open\");\n          }\n        }\n      },\n      {\n        key: \"closeModalById\",\n        value: function closeModalById(targetModal) {\n          this.modal = document.getElementById(targetModal);\n          if (this.modal) this.closeModal();\n        }\n      },\n      {\n        key: \"scrollBehaviour\",\n        value: function scrollBehaviour(toggle) {\n          if (!this.config.disableScroll) return;\n          var body = document.querySelector(\"body\");\n          switch (toggle) {\n            case \"enable\":\n              Object.assign(body.style, { overflow: \"\", height: \"\" });\n              break;\n            case \"disable\":\n              Object.assign(body.style, {\n                overflow: \"hidden\",\n                height: \"100vh\"\n              });\n              break;\n            default:\n          }\n        }\n      },\n      {\n        key: \"addEventListeners\",\n        value: function addEventListeners() {\n          this.modal.addEventListener(\"touchstart\", this.onClick);\n          this.modal.addEventListener(\"click\", this.onClick);\n          document.addEventListener(\"keydown\", this.onKeydown);\n        }\n      },\n      {\n        key: \"removeEventListeners\",\n        value: function removeEventListeners() {\n          this.modal.removeEventListener(\"touchstart\", this.onClick);\n          this.modal.removeEventListener(\"click\", this.onClick);\n          document.removeEventListener(\"keydown\", this.onKeydown);\n        }\n      },\n      {\n        key: \"onClick\",\n        value: function onClick(event) {\n          if (event.target.hasAttribute(this.config.closeTrigger)) {\n            this.closeModal();\n            event.preventDefault();\n          }\n        }\n      },\n      {\n        key: \"onKeydown\",\n        value: function onKeydown(event) {\n          if (event.keyCode === 27) this.closeModal(event);\n          if (event.keyCode === 9) this.maintainFocus(event);\n        }\n      },\n      {\n        key: \"getFocusableNodes\",\n        value: function getFocusableNodes() {\n          var nodes = this.modal.querySelectorAll(FOCUSABLE_ELEMENTS);\n          return Array.apply(undefined, _toConsumableArray(nodes));\n        }\n      },\n      {\n        key: \"setFocusToFirstNode\",\n        value: function setFocusToFirstNode() {\n          if (this.config.disableFocus) return;\n          var focusableNodes = this.getFocusableNodes();\n          if (focusableNodes.length) focusableNodes[0].focus();\n        }\n      },\n      {\n        key: \"maintainFocus\",\n        value: function maintainFocus(event) {\n          var focusableNodes = this.getFocusableNodes();\n\n          // if disableFocus is true\n          if (!this.modal.contains(document.activeElement)) {\n            focusableNodes[0].focus();\n          } else {\n            var focusedItemIndex = focusableNodes.indexOf(\n              document.activeElement\n            );\n\n            if (event.shiftKey && focusedItemIndex === 0) {\n              focusableNodes[focusableNodes.length - 1].focus();\n              event.preventDefault();\n            }\n\n            if (\n              !event.shiftKey &&\n              focusedItemIndex === focusableNodes.length - 1\n            ) {\n              focusableNodes[0].focus();\n              event.preventDefault();\n            }\n          }\n        }\n      }\n    ]);\n\n    return Modal;\n  })();\n\n  /**\n   * Modal prototype ends.\n   * Here on code is responsible for detecting and\n   * auto binding event handlers on modal triggers\n   */\n\n  // Keep a reference to the opened modal\n\n  var activeModal = null;\n\n  /**\n   * Generates an associative array of modals and it's\n   * respective triggers\n   * @param  {array} triggers     An array of all triggers\n   * @param  {string} triggerAttr The data-attribute which triggers the module\n   * @return {array}\n   */\n  var generateTriggerMap = function generateTriggerMap(triggers, triggerAttr) {\n    var triggerMap = [];\n\n    triggers.forEach(function(trigger) {\n      var targetModal = trigger.attributes[triggerAttr].value;\n      if (triggerMap[targetModal] === undefined) triggerMap[targetModal] = [];\n      triggerMap[targetModal].push(trigger);\n    });\n\n    return triggerMap;\n  };\n\n  /**\n   * Validates whether a modal of the given id exists\n   * in the DOM\n   * @param  {number} id  The id of the modal\n   * @return {boolean}\n   */\n  var validateModalPresence = function validateModalPresence(id) {\n    if (!document.getElementById(id)) {\n      console.warn(\n        \"MicroModal: ❗Seems like you have missed %c'\" + id + \"'\",\n        \"background-color: #f8f9fa;color: #50596c;font-weight: bold;\",\n        \"ID somewhere in your code. Refer example below to resolve it.\"\n      );\n      console.warn(\n        \"%cExample:\",\n        \"background-color: #f8f9fa;color: #50596c;font-weight: bold;\",\n        '<div class=\"modal\" id=\"' + id + '\"></div>'\n      );\n      return false;\n    }\n  };\n\n  /**\n   * Validates if there are modal triggers present\n   * in the DOM\n   * @param  {array} triggers An array of data-triggers\n   * @return {boolean}\n   */\n  var validateTriggerPresence = function validateTriggerPresence(triggers) {\n    if (triggers.length <= 0) {\n      console.warn(\n        \"MicroModal: ❗Please specify at least one %c'micromodal-trigger'\",\n        \"background-color: #f8f9fa;color: #50596c;font-weight: bold;\",\n        \"data attribute.\"\n      );\n      console.warn(\n        \"%cExample:\",\n        \"background-color: #f8f9fa;color: #50596c;font-weight: bold;\",\n        '<a href=\"#\" data-micromodal-trigger=\"my-modal\"></a>'\n      );\n      return false;\n    }\n  };\n\n  /**\n   * Checks if triggers and their corresponding modals\n   * are present in the DOM\n   * @param  {array} triggers   Array of DOM nodes which have data-triggers\n   * @param  {array} triggerMap Associative array of modals and their triggers\n   * @return {boolean}\n   */\n  var validateArgs = function validateArgs(triggers, triggerMap) {\n    validateTriggerPresence(triggers);\n    if (!triggerMap) return true;\n    for (var id in triggerMap) {\n      validateModalPresence(id);\n    }\n    return true;\n  };\n\n  /**\n   * Binds click handlers to all modal triggers\n   * @param  {object} config [description]\n   * @return void\n   */\n  var init = function init(config) {\n    // Create an config object with default openTrigger\n    var options = Object.assign(\n      {},\n      { openTrigger: \"data-micromodal-trigger\" },\n      config\n    );\n\n    // Collects all the nodes with the trigger\n    var triggers = [].concat(\n      _toConsumableArray(\n        document.querySelectorAll(\"[\" + options.openTrigger + \"]\")\n      )\n    );\n\n    // Makes a mappings of modals with their trigger nodes\n    var triggerMap = generateTriggerMap(triggers, options.openTrigger);\n\n    // Checks if modals and triggers exist in dom\n    if (\n      options.debugMode === true &&\n      validateArgs(triggers, triggerMap) === false\n    )\n      return;\n\n    // For every target modal creates a new instance\n    for (var key in triggerMap) {\n      var value = triggerMap[key];\n      options.targetModal = key;\n      options.triggers = [].concat(_toConsumableArray(value));\n      activeModal = new Modal(options); // eslint-disable-line no-new\n    }\n  };\n\n  /**\n   * Shows a particular modal\n   * @param  {string} targetModal [The id of the modal to display]\n   * @param  {object} config [The configuration object to pass]\n   * @return {void}\n   */\n  var show = function show(targetModal, config) {\n    var options = config || {};\n    options.targetModal = targetModal;\n\n    // Checks if modals and triggers exist in dom\n    if (\n      options.debugMode === true &&\n      validateModalPresence(targetModal) === false\n    )\n      return;\n\n    // stores reference to active modal\n    activeModal = new Modal(options); // eslint-disable-line no-new\n    activeModal.showModal();\n  };\n\n  /**\n   * Closes the active modal\n   * @param  {string} targetModal [The id of the modal to close]\n   * @return {void}\n   */\n  var close = function close(targetModal) {\n    targetModal\n      ? activeModal.closeModalById(targetModal)\n      : activeModal.closeModal();\n  };\n\n  return { init: init, show: show, close: close };\n})();\n\n"],"file":"../index.js"}